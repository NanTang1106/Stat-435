plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab='p_m1', ylab='values')
lines(p_m1, gini_val, col='skyblue', lwd=2)
lines(p_m1, entropy_val, col='orange', lwd=2)
lines(p_m1, classerror_val, col='brick' lwd=2)
library("RColorBrewer")
colors = brewer.pal(n = 3, name = "RdBu")
colors
colors = brewer.pal(n = 3, name = "Set1")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab='p_m1', ylab='values')
lines(p_m1, gini_val, col=colors[1], lwd=2)
lines(p_m1, entropy_val, col=colors[2], lwd=2)
lines(p_m1, classerror_val, col=colors[3], lwd=2)
legend('topleft', legend=c('gini', 'entropy', 'classification error'), col=colors, led=2)
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab='p_m1', ylab='values')
lines(p_m1, gini_val, col=colors[1], lwd=2)
lines(p_m1, entropy_val, col=colors[2], lwd=2)
lines(p_m1, classerror_val, col=colors[3], lwd=2)
legend('topleft', legend=c('gini', 'entropy', 'classification error'), col=colors, led=2)
p_m1 = seq(from=0, to=1, by=0.01)
gini_val = 2 * p_m1 * (1-p_m1)
entropy_val = - (p_m1 * log(p_m1) + (1-p_m1) * log(1-p_m1))
## 1 - max(p, 1-p)
classerror_val = 1 - pmax(p_m1, 1-p_m1)
colors = brewer.pal(n = 3, name = "Set1")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab='p_m1', ylab='values')
lines(p_m1, gini_val, col=colors[1], lwd=2)
lines(p_m1, entropy_val, col=colors[2], lwd=2)
lines(p_m1, classerror_val, col=colors[3], lwd=2)
legend('topleft', legend=c('gini', 'entropy', 'classification error'), col=colors, led=2)
p_m1 = seq(from=0, to=1, by=0.01)
gini_val = 2 * p_m1 * (1-p_m1)
entropy_val = - (p_m1 * log(p_m1) + (1-p_m1) * log(1-p_m1))
## 1 - max(p, 1-p)
classerror_val = 1 - pmax(p_m1, 1-p_m1)
colors = brewer.pal(n = 3, name = "Set1")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab='p_m1', ylab='values')
lines(p_m1, gini_val, col=colors[1], lwd=2)
lines(p_m1, entropy_val, col=colors[2], lwd=2)
lines(p_m1, classerror_val, col=colors[3], lwd=2)
legend('topleft', legend=c('gini', 'entropy', 'classification error'), col=colors, lwd=2)
getwd()
setwd('/Users/nantang/Google Drive/STAT435/HW/HW4')
knitr::include_graphics("/Users/nantang/Google Drive/STAT435/HW/HW4/8-4-4-a.jpg")
knitr::include_graphics("/Users/nantang/Google Drive/STAT435/HW/HW4/8-4-4-a.jpg")
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
x1_lim = c(-1, 2)
x2_lim = c(0, 3)
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[0, 1]))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[0], 1))
x2_lim[0]
x2_lim[1]
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
axis(2, tick = FALSE)
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
axis(2, tick=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
axis(2, at=c(1, 2))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2', xy.coords(NULL))
axis(2, at=c(1, 2))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2', xy.coords(NULL))
axis(2, at=c(0, 1, 2, 3))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2')
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2',
xaxt="n", yaxt="n")
axis(side=2, at=seq(0, 3, 1), labels = FALSE)
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2',
xaxt="n", yaxt="n")
axis(side=2, at=c(1,2))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2',
xaxt="n", yaxt="n")
axis(side=2, at=c(1, 2))
axis(side=1, at=c(0, 1))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2',
xaxt="n", yaxt="n")
axis(side=2, at=c(1, 2))
axis(side=1, at=c(0, 1))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
text(x=0, y=0.5, labels = -1.8)
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2',
xaxt="n", yaxt="n")
axis(side=2, at=c(1, 2))
axis(side=1, at=c(0, 1))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
text(x=0, y=0.5, labels='-1.80')
text(x=1.25, y=0.5, labels='0.63')
text(x=-0.5, y=1.5, labels='-1.06')
text(x=1, y=1.5, labels='0.21')
text(x=0.5, y=2.5, labels='2.49')
plot(NA, NA, xlim=x1_lim, xlab='x1', ylim=x2_lim, ylab='x2',
xaxt="n", yaxt="n")
axis(side=2, at=c(1, 2))
axis(side=1, at=c(0, 1))
lines(x=x1_lim, y=c(1, 1))
lines(x=c(1, 1), y=c(x2_lim[1], 1))
lines(x=x1_lim, y=c(2, 2))
lines(x=c(0, 0), y=c(1, 2))
text(x=c(0, 1.25, -0.5, 1, 0.5), y=c(0.5, 0.5, 1.5, 1.5, 2.5),
labels=c(-1.8, 0.63, -1.06, 0.21, 2.49))
library("RColorBrewer")
library('tree')
library('randomForest')
source('Carseats-split.R')
set.seed(123)
range_var <- 1:D
library("RColorBrewer")
library('tree')
library('randomForest')
source('Carseats-split.R')
set.seed(123)
## use m = D/3 \approx 3 as number of predictors in each tree
train_rf <- randomForest(formula=Sales~., data=Carseats.train, mtry=3, importance=TRUE)
test_pred <- predict(train_rf, Carseats.test)
test_mse <- mean((test_pred - Carseats.test$Sales)^2)
print(test_mse)
set.seed(123)
range_var <- 1:D
set.seed(123)
D <- ncol(Carseats.train) - 1
train_bag <- randomForest(formula=Sales~., data=Carseats.train, mtry=D, importance=TRUE)
test_pred <- predict(train_bag, Carseats.test)
test_mse <- mean((test_pred - Carseats.test$Sales)^2)
print(test_mse)
importance(train_bag)
varImpPlot(train_bag)
set.seed(123)
range_var <- 1:D
test_mse <- numeric(length(range_var))
for(i in 1:length(range_var)) {
train_rf <- randomForest(formula=Sales~., data=Carseats.train, mtry=range_var[i], importance=TRUE)
test_pred <- predict(train_rf, Carseats.test)
test_mse[i] <- mean((test_pred - Carseats.test$Sales)^2)
}
plot(range_var, test_mse, type='b', pch=16)
best_m <- range_var[which(test_mse == min(test_mse))]
print(best_m)
?pmax
knitr::opts_chunk$set(echo = TRUE)
library("RColorBrewer")
library('tree')
library('randomForest')
p_m1 = seq(from=0, to=1, by=0.01)
1 - pmax(p_m1, 1-p_m1)
p_m1 = seq(from=0, to=1, by=0.01)
gini_val = 2 * p_m1 * (1-p_m1)
entropy_val = - (p_m1 * log(p_m1) + (1-p_m1) * log(1-p_m1))
## 1 - max(p, 1-p)
classerror_val = 1 - pmax(p_m1, 1-p_m1)
colors = brewer.pal(n = 3, name = "Set1")
plot(NA, NA, xlim=c(0, 1), ylim=c(0, 1), xlab='p_m1', ylab='values')
lines(p_m1, gini_val, col=colors[1], lwd=2)
lines(p_m1, entropy_val, col=colors[2], lwd=2)
lines(p_m1, classerror_val, col=colors[3], lwd=2)
legend('topleft', legend=c('gini', 'entropy', 'classification error'), col=colors, lwd=2)
library(ISIR)
install.packages(ISLR)
install.packages('ISLR')
library('ISLR')
data(OJ)
knitr::opts_chunk$set(echo = TRUE)
library("RColorBrewer")
library('tree')
library('randomForest')
library('ISLR')
data(OJ)
OJ
OJ.head
OJ.head()
OJ.describe()
OJ
type(OJ)
class(OJ)
OJ[1, 1]
OJ.head()
OJ.columns
OJ.cols
?sample
nrow(OJ)
train_index <- sample(1:nrow(OJ), 800)
train_index.head()
train_index
train_dt <- OJ[train_index, ]
train_dt.colnames
head(train_dt)
test_dt <- OJ[-train_index,]
test_dt
summary(test_dt)
nrow(test_dt)
nrow(train_dt)
head(test_dt)
train_tree(formula=Purchase~., data=train_dt)
train_tree <- tree(formula=Purchase~., data=train_dt)
summary(train_tree)
train_tree
set.seed(123)
train_index <- sample(1:nrow(OJ), 800)
train_dt <- OJ[train_index,]
test_dt <- OJ[-train_index,]
train_tree <- tree(formula=Purchase~., data=train_dt)
summary(train_tree)
train_tree <- tree(formula=Purchase~., data=train_dt)
summary(train_tree)
set.seed(123)
train_index <- sample(1:nrow(OJ), 800)
train_dt <- OJ[train_index,]
test_dt <- OJ[-train_index,]
train_tree <- tree(formula=Purchase~., data=train_dt)
summary(train_tree)
train_tree
unique(train_dt$Purchase)
plot(train_tree)
text(train_tree)
plot(train_tree)
text(train_tree, col='red')
?kable
test_pred <- predict(train_tree, test_dt, type='class')
table(test_dt[,'Purchase'], test_pred)
test_pred <- predict(train_tree, test_dt, type='class')
kable(table(test_dt[,'Purchase'], test_pred))
?kable
test_pred <- predict(train_tree, test_dt, type='class')
table(test_dt[,'Purchase'], test_pred)
test_pred <- predict(train_tree, test_dt, type='class')
table(test_dt[,'Purchase'], test_pred)
table(test_dt[,'Purchase'], test_pred)/length(test_pred)
table(test_dt[,'Purchase'], test_pred)/length(test_pred)[1,1]
table(test_dt[,'Purchase'], test_pred)[1,1]
test_err <- (table(test_dt[,'Purchase'], test_pred)[1,2] + table(test_dt[,'Purchase'], test_pred)[2,1] ) /length(test_pred)
test_err
test_pred <- predict(train_tree, test_dt, type='class')
table(test_dt[,'Purchase'], test_pred)
test_err <- (table(test_dt[,'Purchase'], test_pred)[1,2] + table(test_dt[,'Purchase'], test_pred)[2,1] ) /length(test_pred)
print(test_err)
train_tree_cv <- cv.tree(train_tree)
set.seed(123)
train_tree_cv <- cv.tree(train_tree)
train_tree_cv
train_tree_cv <- cv.tree(train_tree, FUN = prune.misclass)
train_tree_cv
train_tree_cv <- cv.tree(train_tree, K=10)
train_tree_cv
?cv.tree
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
opt_size
set.seed(123)
train_tree_cv <- cv.tree(train_tree)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
set.seed(123)
train_tree_cv <- cv.tree(train_tree)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
set.seed(123)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
set.seed(123)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
plot(train_tree_cv$dev)
plot(train_tree_cv)
set.seed(123)
train_tree_cv <- cv.tree(train_tree)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
plot(train_tree_cv)
set.seed(123)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
plot(train_tree_cv)
min(train_tree_cv)
train_tree_cv
set.seed(123)
##
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
plot(train_tree_cv)
train_tree_cv$dev
train_cv_err <- train_tree_cv$dev/nrow(train_dt)
tarin_cv_err
train_cv_err
train_cv_err <- train_tree_cv$dev/nrow(train_dt)
plot(train_tree_cv$size, train_cv_err, type='l')
train_tree_cv$size
train_cv_err <- train_tree_cv$dev/nrow(train_dt)
plot(train_tree_cv$size, train_cv_err, type='s')
plot(train_tree_cv)
train_cv_err <- train_tree_cv$dev/nrow(train_dt)
plot(train_tree_cv$size+1, train_cv_err, type='s')
train_cv_err <- train_tree_cv$dev/nrow(train_dt)
plot(train_tree_cv$size.+1, train_cv_err, type='s')
train_tree_cv$size.+1
train_tree_cv$size + 1
plot(train_tree_cv$size+1, train_cv_err, type='s')
plot(train_tree_cv$size-1, train_cv_err, type='s')
plot(train_tree_cv)
plot(train_tree_cv)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
opt_tree <- prune.misclass(train_tree, best=5)
opt_tree <- prune.misclass(train_tree, best=5)
print(opt_tree)
text(opt_tree)
opt_tree <- prune.misclass(train_tree, best=5)
plot(opt_tree)
text(opt_tree)
opt_tree
opt_train_pred <- predict(opt_tree, train_dt, type='class')
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(opt_train_pred, train_dt[,'Purchase'])
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(opt_train_pred, train_dt[,'Purchase'])
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
table(train_dt[,'Purchase'], opt_train_pred )
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
plot(opt_tree)
plot(train_tree)
set.seed(1)
train_index <- sample(1:nrow(OJ), 800)
train_dt <- OJ[train_index,]
test_dt <- OJ[-train_index,]
train_tree <- tree(formula=Purchase~., data=train_dt)
summary(train_tree)
train_tree
plot(train_tree)
text(train_tree, col='red')
test_pred <- predict(train_tree, test_dt, type='class')
table(test_dt[,'Purchase'], test_pred)
test_err <- (table(test_dt[,'Purchase'], test_pred)[1,2] + table(test_dt[,'Purchase'], test_pred)[2,1] ) /length(test_pred)
print(test_err)
set.seed(1)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass)
plot(train_tree_cv)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
opt_tree <- prune.misclass(train_tree, best=5)
plot(opt_tree)
text(opt_tree)
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(train_dt[,'Purchase'], opt_train_pred )
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
opt_tree <- prune.misclass(train_tree, best=8)
plot(opt_tree)
text(opt_tree)
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(train_dt[,'Purchase'], opt_train_pred )
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
plot(train_tree_cv)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
opt_tree <- prune.misclass(train_tree, best=8)
plot(opt_tree)
text(opt_tree)
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(train_dt[,'Purchase'], opt_train_pred )
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
set.seed(1)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=10)
plot(train_tree_cv)
set.seed(123)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=10)
set.seed(42)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=10)
plot(train_tree_cv)
set.seed(123)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=10)
plot(train_tree_cv)
set.seed(123)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
set.seed(1)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
set.seed(42)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
set.seed(12)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
train_tree_cv
opt_tree <- prune.misclass(train_tree, best=8)
plot(opt_tree)
text(opt_tree)
opt_tree <- prune.misclass(train_tree, best=4)
plot(opt_tree)
text(opt_tree)
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(train_dt[,'Purchase'], opt_train_pred )
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
set.seed(10)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
set.seed(2)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
plot(train_tree_cv)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
opt_tree <- prune.misclass(train_tree, best=7)
plot(opt_tree)
text(opt_tree)
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(train_dt[,'Purchase'], opt_train_pred )
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
set.seed(2)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=10)
plot(train_tree_cv)
set.seed(2)
train_tree_cv <- cv.tree(train_tree, FUN=prune.misclass, K=5)
plot(train_tree_cv)
opt_size <- train_tree_cv$size[train_tree_cv$dev == min(train_tree_cv$dev)]
print(opt_size)
opt_tree <- prune.misclass(train_tree, best=7)
plot(opt_tree)
text(opt_tree)
opt_train_pred <- predict(opt_tree, train_dt, type='class')
table(train_dt[,'Purchase'], opt_train_pred )
opt_train_err <- (table(opt_train_pred, train_dt[,'Purchase'])[1, 2] + table(opt_train_pred, train_dt[,'Purchase'])[2, 1]) / nrow(train_dt)
print(opt_train_err)
opt_test_pred <- predict(opt_tree, test_dt, type='class')
table(test_dt[, 'Purchase'], opt_test_pred)
opt_test_err <- (table(test_dt[, 'Purchase'], opt_test_pred)[1, 2] + table(test_dt[, 'Purchase'], opt_test_pred)[2, 1]) / nrow(test_dt)
print(opt_test_err)
