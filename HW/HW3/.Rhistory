names(summary(reg_out))
summary(reg_out)$which
names(summary(reg_out))
summary(reg_out)$rss
summary(reg_out)$cp
summary(reg_out)$outmat
summary(reg_out)$obj
summary(reg_out)$which[3]
summary(reg_out)$which
summary(reg_out)$which[,3]
summary(reg_out)$which[,3]
summary(reg_out)$which[3,3]
summary(reg_out)$which[3,0]
summary(reg_out)$which[3,]
library(leaps)
reg_out <- regsubsets(X, y, nvmax=2, method='forward')
knot_pos <- X[, summary(reg_out)$which[2,]]
summary(reg_out)$which[2,]
which(summary(reg_out)$which[2,])
reg_out <- regsubsets(X, y, nvmax=2, method='forward', intercept=FALSE)
which(summary(reg_out)$which[2,])
knot_pos <- X[, which(summary(reg_out)$which[2,])]
knot_pos
reg_out <- regsubsets(X, y, nvmax=3, method='forward', intercept=FALSE)
knot_pos <- X[, which(summary(reg_out)$which[3,])]
knot_pos
plot(x,y)
points(c(38, 70), c(0, 0), col='red')
points(x[c(38, 70)], c(0, 0), col='red')
lm(y~knot_pos)
lm(y~knot_pos, intercept=F)
knot_dm <- X[, which(summary(reg_out)$which[3,])]
solve(t(knot_dm) %*% knot_dm)
install.packages("matlab")
yhat <- solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
yhat
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
yhat
plot(x, y)
points(x, yhat, col='red')
plot(x, y)
points(x, yhat, col='red')
nterm <- 3
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
nterm <- 6
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
plot(x, y)
points(x, yhat, col='red')
nterm <- 6
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
plot(x, y)
line(x, yhat, col='red')
lines(x, yhat, col='red')
nterm <- 6
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
plot(x, y)
lines(x, yhat, col='red')
plot(x, y)
lines(x, yhat, col='red', lwd=3)
plot(x, y)
lines(x, yhat, col='red', lwd=3)
lines(x, yhat, col='red', type=1, lwd=3)
plot(x, y)
lines(x, yhat, col='red', type=1, lwd=3)
plot(x, y)
lines(x, yhat, col='red', lwd=3)
plot(x, y, col='grey', pch=20)
lines(x, yhat, col='red', lwd=3)
nterm <- 10
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
plot(x, y, col='grey', pch=20)
lines(x, yhat, col='red', lwd=3)
nterm <- 10
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
plot(x, y, col='grey', pch=20)
lines(x, yhat, col='red', lwd=3)
regsubset.fitted.values <- function(X, y, nterm) {
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
return(yhat)
}
yhat <- regsubset.fitted.values(X, y, 5)
plot(x, y, col='grey', pch=20)
lines(x, yhat, col='red', lwd=3)
regsubset.fitted.values <- function(X, y, nterm) {
reg_out <- regsubsets(X, y, nvmax=nterm, method='forward', intercept=FALSE)
knot_dm <- X[, which(summary(reg_out)$which[nterm,])]
yhat <- knot_dm %*% solve(t(knot_dm) %*% knot_dm) %*% t(knot_dm) %*% y
return(yhat)
}
yhat <- regsubset.fitted.values(X, y, 4)
plot(x, y, col='grey', pch=20)
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 1)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 2)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 2)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 1)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 3)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 4)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 5)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
reg_out <- regsubsets(X, y, nvmax=4, method='forward', intercept=FALSE)
summary(reg_out)
yhat <- regsubset.fitted.values(X, y, 6)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 7)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 8)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 9)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 100)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 50)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 100)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat == y
yhat
cbind(y, yhat)
train_size <- length(x)
train_size
X <- truncated.power.design.matrix(x)
yhat <- regsubset.fitted.values(X, y, 100)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
yhat <- regsubset.fitted.values(X, y, 7)
plot(x, y, col='grey', pch=20) +
lines(x, yhat, col='red', lwd=3)
train_size <- length(x)
knot_rss <- numeric(train_size)
X <- truncated.power.design.matrix(x)
for (i in 1:train_size) {
yhat <- regsubset.fitted.values(X, y, i)
rss_temp <- sum((y - yhat)^2)
knot_rss[i] <- rss_temp
}
plot(knot_rss)
plot(knot_rss, type=b)
plot(knot_rss, type='b')
plot(knot_rss, type='l')
plot(knot_rss, type='p')
library(scales)
plot(knot_rss, type='p', col=alpha('grey', alpha=50))
plot(knot_rss, type='p', col=alpha('grey', alpha=50), pch=16)
plot(knot_rss, type='p', col=alpha('grey80', alpha=50), pch=16)
plot(knot_rss, type='p', col=alpha('gray', alpha=50), pch=16)
plot(knot_rss, type='p', col=alpha('gray', alpha=0.9), pch=16)
plot(knot_rss, type='p', col=alpha('gray90', alpha=0.9), pch=16)
plot(knot_rss, type='p', col=alpha('gray10', alpha=0.9), pch=16)
plot(knot_rss, type='p', pch=16, cex=0.4)
plot(knot_rss, type='p', pch=16, cex=0.5)
plot(knot_rss, type='p', pch=16, cex=0.8)
plot(knot_rss, type='p', pch=16, cex=0.6)
plot(knot_rss, type='p', pch=16, cex=0.6,
xlab='Number of Knots', ylab='Training RSS')
console
quit()
source(test-data.R)
source('test-data.R')
source('test-data.r')
getwd()
setwd('/Users/nantang/Google Drive/STAT435')
setwd('/Users/nantang/Google Drive/STAT435/HW/HW3')
source('test-data.r')
library(leaps)
library(scales)
source('test-data.r')
library(glmnet)
?cv.glmnet
cv_fit <- cv.glmnet(X, y, alpha=0)
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambdas)
lambda_range <- c(0, 1, 10, 10^6)
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
X
x
X <- truncated.power.design.matrix(x)
truncated.power.design.matrix <- function(x) {
n <- length(x)
results <- matrix(0, n, n)
results[, n] <- 1
knots <- sort(x)
for (i in 1:n) {
x_i = x[i]
for (j in 1:(n-1)) {
knot_j <- knots[j]
if (x_i > knot_j) {
results[i, j] <- x_i - knot_j
} else {
break
}
}
}
return(results)
}
#train <- c(4, 2, 3, 1)
#print(truncated.power.design.matrix(train))
library(leaps)
library(scales)
library(glmnet)
source('test-data.r')
X <- truncated.power.design.matrix(x)
lambda_range <- c(0, 1, 10, 10^6)
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
lambda_range <- 10^{seq(0, 6, by=1)}
lambda_range
lambda_range <- c(0, 10^{seq(0, 6, by=1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
log(lambda_range)
lambda_range <- c(0, 10^{seq(0, 6, by=0.1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
lambda_range <- c(0, 10^{seq(-6, 6, by=0.5)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
lambda_range <- c(0, 10^{seq(-6, 6, by=0.1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
lambda_range <- c(0, 10^{seq(-3, 6, by=0.1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
train_size <- length(x)
diag(0, rep(1, 4 - 2), 0)
diag(1, 1, 1)
?diag
diag(1, 2, 2)
t(X) %*% X
diag(c(1, 2, 3), 3, 3)
diag(c(0, rep(1, 4), 0), 6, 6)
diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)
yhat <- X %*% solve( t(X) %*% X + lambda * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
## verify lambda=10^6
lambda <- 10^6
yhat <- X %*% solve( t(X) %*% X + lambda * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
yhat
plot(x, y)
lines(x, yhat)
plot(x, y)
lines(x, yhat)
lines(lm(y~x))
plot(x, y)
lines(x, yhat)
lines(lm(y~x), col='red')
lm(y~x)
plot(x, y)
lines(x, yhat)
abline(lm(y~x), col='red')
plot(x, y, col='gray', pch=16)
plot(x, y, col='gray', pch=16)
lines(x, yhat, lwd=3, col='skyblue')
plot(x, y, col='gray', pch=16)
lines(x, yhat, lwd=3, col='skyblue')
abline(lm(y~x), col='orange')
plot(x, y, col='gray', pch=16) +
abline(lm(y~x), col='orange') +
lines(x, yhat, lwd=3, col='skyblue')
plot(x, y, col='gray', pch=16) +
abline(lm(y~x), col='orange') +
lines(x, yhat, lwd=3, col='skyblue', lty=3)
plot(x, y, col='gray', pch=16) +
abline(lm(y~x), col='orange', lty=3) +
lines(x, yhat, lwd=3, col='skyblue', lty=3)
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=3)
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2 )
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2) +
legend('topright', legend=c('lambda = 10^6', 'linear OLS'), col=c('skyblue', 'orange'), lty = c(1, 3))
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
legend('topright', legend=c('lambda = 10^6', 'linear OLS'), col=c('skyblue', 'orange'), lty = c(1, 3))
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
legend('topright', legend=c('lambda = 10^6', 'linear OLS'), col=c('skyblue', 'orange'), lty = c(1, 3))
yhat <- X %*%
solve( t(X) %*% X + lambda * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
yhat <- X %*%
solve( t(X) %*% X + lambda * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size))
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2) +
legend('topright', legend=c('lambda = 10^6', 'linear OLS'),
col=c('skyblue', 'orange'), lty = c(1, 3))
train_size <- length(x)
X <- truncated.power.design.matrix(x)
lambda_range <- c(0, 10^{seq(-3, 6, by=0.1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
## verify lambda=10^6
lambda <- 10^6
yhat <- X %*% solve( t(X) %*% X + lambda * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
legend('topright', legend=c('lambda = 10^6', 'linear OLS'),
col=c('skyblue', 'orange'), lty = c(1, 3))
rdg_fit1 <- glmnet(X, y, alpha=0, lambda=0)
summary(rdg_fit1)
rdg_fit1$beta
yhat <- glmnet(X, y, alpha=0, lambda=10^6)
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
length(x)
length(y)
summary(rdg_fit1)
rdg_fit4<- glmnet(X, y, alpha=0, lambda=10^6)
yhat4 <- predict(rdg_fit4, x)
?predict
yhat4 <- predict(rdg_fit4, s=10^6,  x)
rdg_fit4<- glmnet(X, y, alpha=0, lambda=10^6)
yhat4 <- predict(rdg_fit4, s=10^6, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat4, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
yhat4 <- predict(rdg_fit4, X)
uhat4
yhat4
plot(x, y, col='gray', pch=16) +
lines(x, yhat4, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
rdg_fit4<- glmnet(X, y, alpha=0, lambda=10^6, intercept=FALSE)
yhat4 <- predict(rdg_fit4, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat4, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
yhat1 <- predict(rdg_fit1, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue')
rdg_fit1 <- glmnet(X, y, alpha=1, lambda=0)
rdg_fit2 <- glmnet(X, y, alpha=1, lambda=0)
yhat2 <- predict(rdg_fit2, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat2, lwd=3, col='skyblue')
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='olivegreen')
rdg_fit3 <- glmnet(X, y, alpha=0, lambda=10)
yhat3 <- predict(rdg_fit3, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='olivegreen')
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='olive')
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue')
rdg_fit1 <- glmnet(X, y, alpha=0, lambda=0)
yhat1 <- predict(rdg_fit1, X)
rdg_fit2 <- glmnet(X, y, alpha=0, lambda=1)
yhat2 <- predict(rdg_fit2, X)
rdg_fit3 <- glmnet(X, y, alpha=0, lambda=10)
yhat3 <- predict(rdg_fit3, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
yhat1 <- X %*% solve( t(X) %*% X + 0 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
yhat2 <- X %*% solve( t(X) %*% X + 1 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
yhat3 <- X %*% solve( t(X) %*% X + 10 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
yhat3 <- X %*% solve( t(X) %*% X + 10^5 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
legend('topright', legend = c('lambda = 0', 'lambda = 1', 'lambda = 10'),
col=c('skyblue', 'orange', 'orchid'))
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
legend('topright', legend = c('lambda = 0', 'lambda = 1', 'lambda = 10'),
col=c('skyblue', 'orange', 'orchid'), lty=1)
legend('topright', legend = c('lambda = 0', 'lambda = 1', 'lambda = 10'),
col=c('skyblue', 'orange', 'orchid'), lty=1, lwd=3)
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
legend('topright', legend = c('lambda = 0', 'lambda = 1', 'lambda = 10'),
col=c('skyblue', 'orange', 'orchid'), lty=1, lwd=3)
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
legend('topright', legend = c('lambda = 0', 'lambda = 1', 'lambda = 10'),
col=c('skyblue', 'orange', 'orchid'), lty=1, lwd=3)
rdg_fit1 <- glmnet(X, y, alpha=0, lambda=0, family = 'binomial')
rdg_fit1 <- glmnet(X, y, alpha=1, lambda=0, family = 'binomial')
rdg_fit1 <- glmnet(X, y, alpha=q, lambda=0)
## verify lambda=10^6
rdg_fit4<- glmnet(X, y, alpha=1, lambda=10^6, intercept=FALSE)
yhat4 <- predict(rdg_fit4, X)
plot(x, y, col='gray', pch=16) +
lines(x, yhat4, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
plot(x, y, col='gray', pch=16) +
lines(x, yhat4, lwd=3, col='skyblue') +
abline(lm(y~x), col='orange', lty=2, lwd=2)
## verify lambda=10^6
rdg_fit4<- glmnet(X, y, alpha=0, lambda=10^6, family='binomial')
lambda_range <- c(0, 10^{seq(-3, 6, by=0.1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
lambda_opt <- cv_fit$lambda.min
lambda_min
lambda_opt
print(lambda_opt)
print('Optimized lambda = 'lambda_opt)
print('Optimized lambda = ' + lambda_opt)
print('Optimized lambda = ', lambda_opt)
yhat <- X %*% solve( t(X) %*% X + lambda_opt * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
lambda_range <- c(0, 10^{seq(-3, 6, by=0.1)})
cv_fit <- cv.glmnet(X, y, alpha=0, lambda = lambda_range)
plot(cv_fit)
lambda_opt <- cv_fit$lambda.min
print(lambda_opt)
yhat <- X %*% solve( t(X) %*% X + lambda_opt * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
plot(x, y, col='gray', pch=16) +
lines(x, yhat, lwd=3, col='skyblue')
lambda_opt
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
train_size <- length(x)
X <- truncated.power.design.matrix(x)
rdg_fit1 <- glmnet(X, y, alpha=0, lambda=0)
yhat1 <- predict(rdg_fit1, X)
rdg_fit2 <- glmnet(X, y, alpha=0, lambda=1)
yhat2 <- predict(rdg_fit2, X)
rdg_fit3 <- glmnet(X, y, alpha=0, lambda=10)
yhat3 <- predict(rdg_fit3, X)
#yhat1 <- X %*% solve( t(X) %*% X + 0 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
#yhat2 <- X %*% solve( t(X) %*% X + 1 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
#yhat3 <- X %*% solve( t(X) %*% X + 10 * diag(c(0, rep(1, train_size - 2), 0), train_size, train_size)) %*% t(X) %*% y
plot(x, y, col='gray', pch=16) +
lines(x, yhat1, lwd=3, col='skyblue') +
lines(x, yhat2, lwd=3, col='orange') +
lines(x, yhat3, lwd=3, col='orchid')
legend('topright', legend = c('lambda = 0', 'lambda = 1', 'lambda = 10'),
col=c('skyblue', 'orange', 'orchid'), lty=1, lwd=3)
## verify lambda=10^6
rdg_fit4<- glmnet(X, y, alpha=0, lambda=10^6, family='binomial')
